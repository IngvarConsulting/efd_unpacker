#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è —Ä–µ–ª–∏–∑–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
–Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–º–º–∏—Ç–æ–≤, —Å–ª–µ–¥—É—é—â–∏—Ö –∫–æ–Ω–≤–µ–Ω—Ü–∏–∏ Conventional Commits.
"""

import re
import subprocess
import sys
from collections import defaultdict
from typing import Dict, List, Tuple

# –ú–∞–ø–ø–∏–Ω–≥ —Ç–∏–ø–æ–≤ –∫–æ–º–º–∏—Ç–æ–≤ –Ω–∞ —Ä—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è
TYPE_MAPPING = {
    'feat': '‚ú® –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏',
    'fix': 'üêõ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è',
    'docs': 'üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è',
    'style': 'üíÑ –°—Ç–∏–ª—å –∫–æ–¥–∞',
    'refactor': '‚ôªÔ∏è –†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥',
    'perf': '‚ö° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å',
    'test': 'üß™ –¢–µ—Å—Ç—ã',
    'build': 'üî® –°–±–æ—Ä–∫–∞',
    'ci': 'üë∑ CI/CD',
    'chore': 'üîß –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ'
}

# –ú–∞–ø–ø–∏–Ω–≥ –æ–±–ª–∞—Å—Ç–µ–π –Ω–∞ —Ä—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è
SCOPE_MAPPING = {
    'ui': '–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å',
    'localization': '–ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è',
    'build': '—Å–±–æ—Ä–∫–∞',
    'installer': '—É—Å—Ç–∞–Ω–æ–≤—â–∏–∫',
    'linux': 'Linux',
    'windows': 'Windows',
    'macos': 'macOS'
}

def get_commits_since_last_release() -> List[str]:
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–º–º–∏—Ç—ã –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ç–µ–≥–∞ –¥–æ —Ç–µ–∫—É—â–µ–≥–æ —Ç–µ–≥–∞ –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ."""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–µ–≥–∏, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –≤–µ—Ä—Å–∏–∏
        result = subprocess.run(
            ['git', 'tag', '--sort=-version:refname'],
            capture_output=True, text=True, check=True
        )
        tags = result.stdout.strip().split('\n') if result.stdout.strip() else []
        
        if len(tags) < 2:
            # –ï—Å–ª–∏ —Ç–µ–≥–æ–≤ –º–µ–Ω—å—à–µ 2, –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–º–º–∏—Ç—ã
            result = subprocess.run(
                ['git', 'log', '--oneline', '--no-merges'],
                capture_output=True, text=True, check=True
            )
            return result.stdout.strip().split('\n') if result.stdout.strip() else []
        
        # –¢–µ–∫—É—â–∏–π —Ç–µ–≥ (–ø–µ—Ä–≤—ã–π –≤ —Å–ø–∏—Å–∫–µ)
        current_tag = tags[0]
        # –ü—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–µ–≥ (–≤—Ç–æ—Ä–æ–π –≤ —Å–ø–∏—Å–∫–µ)
        previous_tag = tags[1]
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–º–∏—Ç—ã –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ç–µ–≥–∞ –¥–æ —Ç–µ–∫—É—â–µ–≥–æ —Ç–µ–≥–∞ –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º ^previous_tag —á—Ç–æ–±—ã –∏—Å–∫–ª—é—á–∏—Ç—å –∫–æ–º–º–∏—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ç–µ–≥–∞
        result = subprocess.run(
            ['git', 'log', f'{previous_tag}..{current_tag}', '--oneline', '--no-merges'],
            capture_output=True, text=True, check=True
        )
        commits = result.stdout.strip().split('\n') if result.stdout.strip() else []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–∏—Ç —Ç–µ–∫—É—â–µ–≥–æ —Ç–µ–≥–∞, –µ—Å–ª–∏ –æ–Ω –Ω–µ –≤–∫–ª—é—á–µ–Ω
        result = subprocess.run(
            ['git', 'log', current_tag, '-1', '--oneline', '--no-merges'],
            capture_output=True, text=True, check=True
        )
        current_tag_commit = result.stdout.strip()
        if current_tag_commit and current_tag_commit not in commits:
            commits.insert(0, current_tag_commit)
        
        return commits
        
    except subprocess.CalledProcessError:
        # –ï—Å–ª–∏ –Ω–µ—Ç —Ç–µ–≥–æ–≤, –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–º–º–∏—Ç—ã
        result = subprocess.run(
            ['git', 'log', '--oneline', '--no-merges'],
            capture_output=True, text=True, check=True
        )
        return result.stdout.strip().split('\n') if result.stdout.strip() else []

def parse_commit(commit_line: str) -> Tuple[str, str, str, str]:
    """
    –ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É –∫–æ–º–º–∏—Ç–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç (—Ç–∏–ø, –æ–±–ª–∞—Å—Ç—å, –æ–ø–∏—Å–∞–Ω–∏–µ, —Ö–µ—à).
    
    Args:
        commit_line: –°—Ç—Ä–æ–∫–∞ –∫–æ–º–º–∏—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "hash message"
    
    Returns:
        Tuple —Å (—Ç–∏–ø, –æ–±–ª–∞—Å—Ç—å, –æ–ø–∏—Å–∞–Ω–∏–µ, —Ö–µ—à)
    """
    if not commit_line:
        return None, None, None, None
    
    parts = commit_line.split(' ', 1)
    if len(parts) != 2:
        return None, None, None, parts[0] if parts else None
    
    commit_hash, message = parts
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è Conventional Commits
    pattern = r'^([a-z]+)(?:\(([a-z-]+)\))?:\s*(.+)$'
    match = re.match(pattern, message)
    
    if not match:
        return None, None, message, commit_hash
    
    commit_type, scope, description = match.groups()
    return commit_type, scope, description, commit_hash

def format_commit_description(description: str, scope: str = None) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞."""
    if scope and scope in SCOPE_MAPPING:
        return f"{description} ({SCOPE_MAPPING[scope]})"
    return description

def generate_release_notes(version: str) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–ª–∏–∑–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."""
    commits = get_commits_since_last_release()
    
    if not commits:
        return f"""# EFD Unpacker {version}

–†–µ–ª–∏–∑ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –∫–æ–¥–µ.

## –ó–∞–≥—Ä—É–∑–∫–∏

–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ñ–∞–π–ª –¥–ª—è –≤–∞—à–µ–π –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ.

–î–ª—è –ø–æ–¥—Ä–æ–±–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é —Å–º. [README](https://github.com/IngvarConsulting/efd_unpacker#readme)."""

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–æ–º–º–∏—Ç—ã –ø–æ —Ç–∏–ø–∞–º
    grouped_commits = defaultdict(list)
    other_commits = []
    
    for commit in commits:
        commit_type, scope, description, commit_hash = parse_commit(commit)
        
        if commit_type and commit_type in TYPE_MAPPING:
            formatted_desc = format_commit_description(description, scope)
            grouped_commits[commit_type].append(formatted_desc)
        else:
            other_commits.append(description if description else commit)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–ª–∏–∑–∞
    lines = [f"# EFD Unpacker {version}"]
    lines.append("")
    lines.append("## –ò–∑–º–µ–Ω–µ–Ω–∏—è")
    lines.append("")
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–º–∏—Ç—ã
    for commit_type in ['feat', 'fix', 'refactor', 'perf', 'build', 'ci', 'docs', 'style', 'test', 'chore']:
        if commit_type in grouped_commits:
            lines.append(f"### {TYPE_MAPPING[commit_type]}")
            for description in grouped_commits[commit_type]:
                lines.append(f"- {description}")
            lines.append("")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–º–∏—Ç—ã
    if other_commits:
        lines.append("### üîÑ –ü—Ä–æ—á–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è")
        for description in other_commits:
            lines.append(f"- {description}")
        lines.append("")
    
    lines.append("## –ó–∞–≥—Ä—É–∑–∫–∏")
    lines.append("")
    lines.append("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ñ–∞–π–ª –¥–ª—è –≤–∞—à–µ–π –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ.")
    lines.append("")
    lines.append("–î–ª—è –ø–æ–¥—Ä–æ–±–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é —Å–º. [README](https://github.com/IngvarConsulting/efd_unpacker#readme).")
    
    return "\n".join(lines)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    if len(sys.argv) != 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python generate_release_notes.py <version>")
        sys.exit(1)
    
    version = sys.argv[1]
    release_notes = generate_release_notes(version)
    print(release_notes)

if __name__ == "__main__":
    main() 