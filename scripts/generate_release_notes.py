#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è —Ä–µ–ª–∏–∑–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
–Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–º–º–∏—Ç–æ–≤, —Å–ª–µ–¥—É—é—â–∏—Ö –∫–æ–Ω–≤–µ–Ω—Ü–∏–∏ Conventional Commits.
"""

import re
import subprocess
import sys
import os
from collections import defaultdict
from typing import Dict, List, Tuple

# –ú–∞–ø–ø–∏–Ω–≥ —Ç–∏–ø–æ–≤ –∫–æ–º–º–∏—Ç–æ–≤ –Ω–∞ —Ä—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è
TYPE_MAPPING = {
    'feat': '‚ú® –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏',
    'fix': 'üêõ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è',
    'docs': 'üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è',
    'style': 'üíÑ –°—Ç–∏–ª—å –∫–æ–¥–∞',
    'refactor': '‚ôªÔ∏è –†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥',
    'perf': '‚ö° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å',
    'test': 'üß™ –¢–µ—Å—Ç—ã',
    'build': 'üî® –°–±–æ—Ä–∫–∞',
    'ci': 'üë∑ CI/CD',
    'chore': 'üîß –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ'
}

# –ú–∞–ø–ø–∏–Ω–≥ –æ–±–ª–∞—Å—Ç–µ–π –Ω–∞ —Ä—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è
SCOPE_MAPPING = {
    'ui': '–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å',
    'localization': '–ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è',
    'build': '—Å–±–æ—Ä–∫–∞',
    'installer': '—É—Å—Ç–∞–Ω–æ–≤—â–∏–∫',
    'linux': 'Linux',
    'windows': 'Windows',
    'macos': 'macOS'
}

def is_release_mode() -> bool:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –∑–∞–ø—É—â–µ–Ω –ª–∏ —Å–∫—Ä–∏–ø—Ç –≤ —Ä–µ–∂–∏–º–µ –≤—ã–ø—É—Å–∫–∞ —Ä–µ–ª–∏–∑–∞ –ø–æ –Ω–∞–ª–∏—á–∏—é —Ç–µ–≥–∞ –Ω–∞ —Ç–µ–∫—É—â–µ–º –∫–æ–º–º–∏—Ç–µ."""
    try:
        result = subprocess.run(
            ['git', 'describe', '--exact-match', '--tags', 'HEAD'],
            capture_output=True, text=True, check=True
        )
        return True
    except subprocess.CalledProcessError:
        return False

def get_current_tag() -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Ç–µ–≥, –µ—Å–ª–∏ HEAD –ø–æ–º–µ—á–µ–Ω —Ç–µ–≥–æ–º."""
    if is_release_mode():
        try:
            result = subprocess.run(
                ['git', 'describe', '--exact-match', '--tags', 'HEAD'],
                capture_output=True, text=True, check=True
            )
            return result.stdout.strip()
        except subprocess.CalledProcessError:
            return None
    return None

def get_version_from_tag(tag: str) -> str:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤–µ—Ä—Å–∏—é –∏–∑ —Ç–µ–≥–∞, —É–±–∏—Ä–∞—è –ø—Ä–µ—Ñ–∏–∫—Å 'v' –µ—Å–ª–∏ –µ—Å—Ç—å."""
    if tag.startswith('v'):
        return tag[1:]  # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å 'v'
    return tag

def get_target_version() -> str:
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ü–µ–ª–µ–≤—É—é –≤–µ—Ä—Å–∏—é –¥–ª—è —Ä–µ–ª–∏–∑ –Ω–æ—É—Ç—Å.
    
    Returns:
        –í–µ—Ä—Å–∏—è –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π —Å–æ–∑–¥–∞–µ—Ç—Å—è —Ä–µ–ª–∏–∑
    """
    if is_release_mode():
        # –í —Ä–µ–∂–∏–º–µ –≤—ã–ø—É—Å–∫–∞ —Ä–µ–ª–∏–∑–∞ –±–µ—Ä–µ–º –≤–µ—Ä—Å–∏—é –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Ç–µ–≥–∞
        current_tag = get_current_tag()
        if current_tag:
            return get_version_from_tag(current_tag)
        else:
            print("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–µ—Ä—Å–∏—é –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Ç–µ–≥–∞")
            sys.exit(1)
    else:
        # –í —Ä–µ–∂–∏–º–µ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â—É—é –≤–µ—Ä—Å–∏—é
        try:
            result = subprocess.run(
                ['git', 'tag', '--sort=-version:refname'],
                capture_output=True, text=True, check=True
            )
            tags = result.stdout.strip().split('\n') if result.stdout.strip() else []
            
            if not tags:
                return "1.0.0"  # –ü–µ—Ä–≤—ã–π —Ä–µ–ª–∏–∑
            
            # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç–µ–≥ –∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º patch –≤–µ—Ä—Å–∏—é
            last_tag = tags[0]
            last_version = get_version_from_tag(last_tag)
            
            # –ü—Ä–æ—Å—Ç–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ patch –≤–µ—Ä—Å–∏–∏ (–º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å –ª–æ–≥–∏–∫—É)
            if '.' in last_version:
                parts = last_version.split('.')
                if len(parts) >= 3:
                    patch = int(parts[2]) + 1
                    parts[2] = str(patch)
                    return '.'.join(parts)
                else:
                    return f"{last_version}.1"
            else:
                return f"{last_version}.1"
                
        except (subprocess.CalledProcessError, ValueError, IndexError):
            return "1.0.0"  # Fallback

def get_commits_since_last_release(preview_mode: bool = False) -> List[str]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–º–º–∏—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã.
    
    Args:
        preview_mode: True –¥–ª—è —Ä–µ–∂–∏–º–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞, False –¥–ª—è —Ä–µ–∂–∏–º–∞ –≤—ã–ø—É—Å–∫–∞ —Ä–µ–ª–∏–∑–∞
    
    Returns:
        –°–ø–∏—Å–æ–∫ –∫–æ–º–º–∏—Ç–æ–≤
    """
    try:
        result = subprocess.run(
            ['git', 'tag', '--sort=-version:refname'],
            capture_output=True, text=True, check=True
        )
        tags = result.stdout.strip().split('\n') if result.stdout.strip() else []
        
        if preview_mode:
            # –†–µ–∂–∏–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞: –æ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ç–µ–≥–∞ –¥–æ HEAD
            if not tags:
                result = subprocess.run(
                    ['git', 'log', '--oneline', '--no-merges'],
                    capture_output=True, text=True, check=True
                )
                all_commits = result.stdout.strip().split('\n') if result.stdout.strip() else []
                return filter_service_commits(all_commits)
            last_tag = tags[0]
            result = subprocess.run(
                ['git', 'log', f'{last_tag}..HEAD', '--oneline', '--no-merges'],
                capture_output=True, text=True, check=True
            )
            commits = result.stdout.strip().split('\n') if result.stdout.strip() else []
            return filter_service_commits(commits)
        else:
            # –†–µ–∂–∏–º –≤—ã–ø—É—Å–∫–∞ —Ä–µ–ª–∏–∑–∞: –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ç–µ–≥–∞ –¥–æ —Ç–µ–∫—É—â–µ–≥–æ —Ç–µ–≥–∞
            current_tag = get_current_tag()
            if not current_tag:
                print("–û—à–∏–±–∫–∞: HEAD –Ω–µ –ø–æ–º–µ—á–µ–Ω —Ç–µ–≥–æ–º. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –≤ —Ä–µ–∂–∏–º–µ –≤—ã–ø—É—Å–∫–∞ —Ä–µ–ª–∏–∑–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ --preview")
                return []
            if len(tags) < 2:
                result = subprocess.run(
                    ['git', 'log', current_tag, '-1', '--oneline', '--no-merges'],
                    capture_output=True, text=True, check=True
                )
                commits = result.stdout.strip().split('\n') if result.stdout.strip() else []
                return filter_service_commits(commits)
            previous_tag = tags[1] if tags[0] == current_tag else tags[0]
            result = subprocess.run(
                ['git', 'log', f'{previous_tag}..{current_tag}', '--oneline', '--no-merges'],
                capture_output=True, text=True, check=True
            )
            commits = result.stdout.strip().split('\n') if result.stdout.strip() else []
            result = subprocess.run(
                ['git', 'log', current_tag, '-1', '--oneline', '--no-merges'],
                capture_output=True, text=True, check=True
            )
            current_tag_commit = result.stdout.strip()
            if current_tag_commit and current_tag_commit not in commits:
                commits.insert(0, current_tag_commit)
            return filter_service_commits(commits)
    except subprocess.CalledProcessError as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–º–º–∏—Ç–æ–≤: {e}")
        return []

def filter_service_commits(commits: List[str]) -> List[str]:
    """–§–∏–ª—å—Ç—Ä—É–µ—Ç —Å–ª—É–∂–µ–±–Ω—ã–µ –∫–æ–º–º–∏—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏."""
    filtered_commits = []
    for commit in commits:
        # –ò—Å–∫–ª—é—á–∞–µ–º –∫–æ–º–º–∏—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ —Å–ª—É–∂–µ–±–Ω—ã–µ –∫–æ–º–º–∏—Ç—ã
        if any(keyword in commit.lower() for keyword in [
            'init:', 'initial', '–Ω–æ–≤—ã–π git-—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π', 'reset', 'squash'
        ]):
            continue
        filtered_commits.append(commit)
    return filtered_commits

def parse_commit(commit_line: str) -> Tuple[str, str, str, str]:
    """
    –ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É –∫–æ–º–º–∏—Ç–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç (—Ç–∏–ø, –æ–±–ª–∞—Å—Ç—å, –æ–ø–∏—Å–∞–Ω–∏–µ, —Ö–µ—à).
    
    Args:
        commit_line: –°—Ç—Ä–æ–∫–∞ –∫–æ–º–º–∏—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "hash message"
    
    Returns:
        Tuple —Å (—Ç–∏–ø, –æ–±–ª–∞—Å—Ç—å, –æ–ø–∏—Å–∞–Ω–∏–µ, —Ö–µ—à)
    """
    if not commit_line:
        return None, None, None, None
    
    parts = commit_line.split(' ', 1)
    if len(parts) != 2:
        return None, None, None, parts[0] if parts else None
    
    commit_hash, message = parts
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è Conventional Commits
    pattern = r'^([a-z]+)(?:\(([a-z-]+)\))?:\s*(.+)$'
    match = re.match(pattern, message)
    
    if not match:
        return None, None, message, commit_hash
    
    commit_type, scope, description = match.groups()
    return commit_type, scope, description, commit_hash

def format_commit_description(description: str, scope: str = None) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞."""
    if scope and scope in SCOPE_MAPPING:
        return f"{description} ({SCOPE_MAPPING[scope]})"
    return description

def generate_release_notes(preview_mode: bool = False) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–ª–∏–∑–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.
    
    Args:
        preview_mode: True –¥–ª—è —Ä–µ–∂–∏–º–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞, False –¥–ª—è —Ä–µ–∂–∏–º–∞ –≤—ã–ø—É—Å–∫–∞ —Ä–µ–ª–∏–∑–∞
    """
    version = get_target_version()
    commits = get_commits_since_last_release(preview_mode)
    grouped_commits = defaultdict(list)
    other_commits = []
    for commit in commits:
        commit_type, scope, description, commit_hash = parse_commit(commit)
        if commit_type and commit_type in TYPE_MAPPING:
            formatted_desc = format_commit_description(description, scope)
            grouped_commits[commit_type].append(formatted_desc)
        else:
            other_commits.append(description if description else commit)
    lines = ["## –ò–∑–º–µ–Ω–µ–Ω–∏—è"]
    for commit_type in ['feat', 'fix', 'refactor', 'perf', 'build', 'ci', 'docs', 'style', 'test', 'chore']:
        if commit_type in grouped_commits:
            lines.append(f"### {TYPE_MAPPING[commit_type]}")
            for description in grouped_commits[commit_type]:
                lines.append(f"- {description}")
            lines.append("")
    if other_commits:
        lines.append("### üîÑ –ü—Ä–æ—á–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è")
        for description in other_commits:
            lines.append(f"- {description}")
        lines.append("")
    lines.append("## –ó–∞–≥—Ä—É–∑–∫–∏")
    lines.append("")
    lines.append("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ñ–∞–π–ª –¥–ª—è –≤–∞—à–µ–π –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ.")
    lines.append("")
    lines.append("–î–ª—è –ø–æ–¥—Ä–æ–±–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é —Å–º. [README](https://github.com/IngvarConsulting/efd_unpacker#readme).")
    return "\n".join(lines)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    if len(sys.argv) > 1:
        if sys.argv[1] == '--preview':
            preview_mode = True
        elif sys.argv[1] == '--release':
            preview_mode = False
        elif sys.argv[1] in ['-h', '--help']:
            print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
            print("  python generate_release_notes.py [--preview]")
            print("  python generate_release_notes.py [--release]")
            print("")
            print("–û–ø—Ü–∏–∏:")
            print("  --preview  –†–µ–∂–∏–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞: –æ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ç–µ–≥–∞ –¥–æ HEAD")
            print("  --release  –†–µ–∂–∏–º –≤—ã–ø—É—Å–∫–∞ —Ä–µ–ª–∏–∑–∞: –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ç–µ–≥–∞ –¥–æ —Ç–µ–∫—É—â–µ–≥–æ —Ç–µ–≥–∞")
            print("")
            print("–ï—Å–ª–∏ –æ–ø—Ü–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –ø–æ –Ω–∞–ª–∏—á–∏—é —Ç–µ–≥–∞:")
            print("- –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –∫–æ–º–º–∏—Ç –ø–æ–º–µ—á–µ–Ω —Ç–µ–≥–æ–º - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è --release")
            print("- –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –∫–æ–º–º–∏—Ç –Ω–µ –ø–æ–º–µ—á–µ–Ω —Ç–µ–≥–æ–º - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è --preview")
            print("")
            print("–í–µ—Ä—Å–∏—è –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑ —Ç–µ–≥–æ–≤.")
            sys.exit(0)
        else:
            print(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø—Ü–∏—è: {sys.argv[1]}")
            print("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏")
            sys.exit(1)
    else:
        preview_mode = not is_release_mode()
    
    version = get_target_version()
    print(f"–†–µ–∂–∏–º: {'–ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞' if preview_mode else '–≤—ã–ø—É—Å–∫–∞ —Ä–µ–ª–∏–∑–∞'}")
    print(f"–í–µ—Ä—Å–∏—è: {version}")
    release_notes = generate_release_notes(preview_mode)
    print(release_notes)

if __name__ == "__main__":
    main() 